FROM centos:7

RUN yum update  -y
RUN yum install -y epel-release && \
  yum install -y unzip \
  which \
  make \
  wget \
  zip \
  bzip2 \
  python-pip

RUN pip install anchorecli yamale

# chrome
RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
  yum install -y google-chrome-stable_current_x86_64.rpm && \
  yum install -y Xvfb

# Set the locale(en_US.UTF-8)
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8


# Git
ENV GIT_VERSION 2.21.0
RUN yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel && \
  yum install -y gcc perl-ExtUtils-MakeMaker && \
  cd /usr/src  && \
  wget https://www.kernel.org/pub/software/scm/git/git-${GIT_VERSION}.tar.gz  && \
  tar xzf git-2.21.0.tar.gz  && \
  cd git-2.21.0 && \
  make prefix=/usr/local/git all  && \
  make prefix=/usr/local/git install

ENV PATH /usr/local/git/bin:$PATH

# java required for updatebot
RUN yum install -y java-1.8.0-openjdk-devel
RUN yum -y groupinstall 'Development Tools'

RUN yum remove -y git

ENV JQ_RELEASE_VERSION 1.5
RUN wget https://github.com/stedolan/jq/releases/download/jq-${JQ_RELEASE_VERSION}/jq-linux64 && mv jq-linux64 jq && chmod +x jq && cp jq /usr/bin/jq

# CUDA 10.0
RUN echo $'[cudarepo]\n\
name=Cuda Repository\n\
baseurl=https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/\n\
enabled=1\n\
gpgcheck=1\n\
gpgkey=https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/7fa2af80.pub\n'\
>/etc/yum.repos.d/cuda.repo

RUN yum clean all && \
yum -y install cuda-toolkit-10-0

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.0 brand=tesla,driver>=384,driver<385 brand=tesla,driver>=410,driver<411"

# Anaconda
ENV ANACONDAVERSION 3-2019.03
RUN curl -fLo anaconda.sh https://repo.anaconda.com/archive/Anaconda${ANACONDAVERSION}-Linux-x86_64.sh && \
sh ./anaconda.sh -b && \
eval "$(/root/anaconda3/bin/conda shell.bash hook)" && \
conda init && \
conda install -c conda-forge -c pytorch onnx=1.5.0 flake8=3.7.7 hypothesis=4.10.0 pytorch=1.1.0 -y && \
rm anaconda.sh

# Latest Git large file store support
RUN mkdir git-lfs && \
curl "https://api.github.com/repos/git-lfs/git-lfs/releases/latest" | \
    grep '"tag_name":' | \
    sed -E 's/.*"([^"]+)".*/\1/' | \
    xargs -I {} curl -fL 'https://github.com/git-lfs/git-lfs/releases/download/'{}'/git-lfs-linux-amd64-'{}'.tar.gz' | tar xzvC git-lfs && \
git-lfs/install.sh && \
rm -rf git-lfs

RUN cp /root/.bash_profile /etc/profile.d/bash_profile.sh
RUN mkdir -p /usr/src/app

# work around circular error
RUN rm /etc/profile.d/bash_profile.sh

RUN yum clean all

CMD ["conda", "--version"]
